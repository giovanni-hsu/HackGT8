{"ast":null,"code":"/**Types of blocks:\n * 0 Air\n * 1 Stone\n * 2 Water\n * 3 Fixed water\n */\n\n/** Function takes in grid, coordinates and type of block to be placed\n * returns boolean representing success / failure\n */\nclass GameGrid {\n  constructor(size) {\n    this.grid = this.intializeGrid(size);\n    this.numToIcon = {\n      0: \" \",\n      1: \"#\",\n      2: \"o\",\n      3: \"o\"\n    };\n  }\n\n  placeBlock(x, y, type) {\n    if (this.grid[x][y] === 0) {\n      this.grid[x][y] = type;\n      return true;\n    } else {\n      return false;\n    }\n  }\n  /** Function takes in grid and replaces water blocks with air blocks\n   */\n\n\n  resetGrid() {\n    for (let x = 0; x < this.grid.length; x++) {\n      for (let y = 0; y < this.grid.length; y++) {\n        if (this.grid[x][y] === 2) {\n          this.grid[x][y] = 0;\n        }\n      }\n    }\n  }\n\n  intializeGrid() {\n    var grid = new Array(this.props.size);\n\n    for (var i = 0; i < this.props.size; i++) {\n      grid[i] = new Array(this.props.size);\n\n      for (var j = 0; j < this.props.size; j++) {\n        grid[i][j] = 0;\n      }\n    }\n\n    return grid;\n  }\n\n  printGrid() {\n    process.stdout.write(\"----------------\\n\");\n\n    for (var i = 0; i < this.grid.length; i++) {\n      for (var j = 0; j < this.grid[i].length; j++) {\n        process.stdout.write(this.numToIcon[this.grid[i][j]] + \" \");\n      }\n\n      process.stdout.write(\"|\\n\");\n    }\n\n    process.stdout.write(\"----------------\\n\");\n  }\n\n  updateGrid() {\n    for (var i = 0; i < this.grid.length - 1; i++) {\n      for (var j = 0; j < this.grid[i].length; j++) {\n        if (this.grid[i][j] === 2) {\n          if (this.grid[i + 1][j] === 0) {\n            this.grid[i + 1][j] = 4;\n          } else if (this.grid[i + 1][j] === 1) {\n            if (this.grid[i][j - 1] === 0) this.grid[i][j - 1] = 4;\n            if (this.grid[i][j + 1] === 0) this.grid[i][j + 1] = 4;\n          }\n\n          this.grid[i][j] = 3;\n        }\n      }\n    }\n\n    for (i = 0; i < this.grid.length; i++) {\n      for (j = 0; j < this.grid[i].length; j++) {\n        if (this.grid[i][j] === 4) this.grid[i][j] = 2;\n      }\n    }\n  }\n\n  placeWater(x, y) {\n    this.grid[x][y] = 2;\n  } // test code end\n\n\n  done() {\n    for (let i = 0; i < this.grid[0].length; i++) {\n      if (this.grid[this.grid.length][i] === 2 || this.grid[this.grid.length][i] === 3) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  placeStone(x, y) {\n    this.grid[x][y] = 1;\n  }\n\n}\n\nexport default GameGrid;","map":{"version":3,"sources":["/home/johndoe/Documents/GT/HackGT/DisHackGT8/Discere-Hack-GT-8/HackGT8/src/GameLogic.js"],"names":["GameGrid","constructor","size","grid","intializeGrid","numToIcon","placeBlock","x","y","type","resetGrid","length","Array","props","i","j","printGrid","process","stdout","write","updateGrid","placeWater","done","placeStone"],"mappings":"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","sourcesContent":["/**Types of blocks:\n * 0 Air\n * 1 Stone\n * 2 Water\n * 3 Fixed water\n */\n\n/** Function takes in grid, coordinates and type of block to be placed\n * returns boolean representing success / failure\n */\nclass GameGrid {\n\n    constructor(size) {\n        this.grid = this.intializeGrid(size);\n        this.numToIcon = {0:\" \", 1:\"#\", 2:\"o\", 3:\"o\"};\n    }\n\n    placeBlock(x, y, type) {\n        if (this.grid[x][y] === 0) {\n            this.grid[x][y] = type;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /** Function takes in grid and replaces water blocks with air blocks\n     */\n    resetGrid() {\n        for (let x = 0; x <  this.grid.length; x++) {\n            for (let y = 0; y <  this.grid.length; y++) {\n                if ( this.grid[x][y] === 2) {\n                     this.grid[x][y] = 0;\n                }\n            }\n        }\n    }\n\n    intializeGrid() {\n        var grid = new Array(this.props.size);\n        for (var i = 0; i < this.props.size; i++) {\n            grid[i] = new Array(this.props.size);\n            for(var j=0; j<this.props.size; j++) {\n                grid[i][j] = 0;\n            }\n        }\n        return grid;\n    }\n\n    printGrid() {\n        process.stdout.write(\"----------------\\n\");\n        for(var i=0; i< this.grid.length; i++) {\n            for(var j=0; j< this.grid[i].length; j++) {\n                process.stdout.write(this.numToIcon[this.grid[i][j]] + \" \");\n            }\n            process.stdout.write(\"|\\n\");\n        }\n        process.stdout.write(\"----------------\\n\");\n    }\n\n    updateGrid() {\n        for(var i=0; i< this.grid.length-1; i++) {\n            for(var j=0; j< this.grid[i].length; j++) {\n                if ( this.grid[i][j] === 2) {\n                    if ( this.grid[i+1][j] === 0) {\n                         this.grid[i+1][j] = 4;\n                    } else if ( this.grid[i+1][j] === 1) {\n                        if ( this.grid[i][j-1] === 0)  this.grid[i][j-1] = 4;\n                        if ( this.grid[i][j+1] === 0)  this.grid[i][j+1] = 4;\n                    }\n                     this.grid[i][j] = 3;\n                }\n            }\n        }\n        for(i=0; i< this.grid.length; i++) {\n            for(j=0; j< this.grid[i].length; j++) {\n                if ( this.grid[i][j] === 4)  this.grid[i][j] = 2;\n            }\n        }\n        \n    }\n\n    placeWater(x, y) {\n         this.grid[x][y] = 2;\n    }\n    // test code end\n\n    done() {\n        for (let i = 0; i <  this.grid[0].length; i++) {\n            if ( this.grid[ this.grid.length][i] === 2 ||  this.grid[ this.grid.length][i] === 3) {\n                return true\n            }\n        }\n        return false\n    }\n\n    placeStone(x, y) {\n         this.grid[x][y] = 1;\n    }\n}\n\nexport default GameGrid"]},"metadata":{},"sourceType":"module"}