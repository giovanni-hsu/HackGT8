{"ast":null,"code":"/**Types of blocks:\n * 0 Air\n * 1 Stone\n * 2 Water\n * 3 Fixed water\n */\n\n/** Function takes in grid, coordinates and type of block to be placed\n * returns boolean representing success / failure\n */\nclass GameGrid {\n  constructor(props) {\n    this.grid = this.intializeGrid(props.size);\n    this.numToIcon = {\n      0: \" \",\n      1: \"#\",\n      2: \"o\",\n      3: \"o\"\n    };\n  }\n\n  placeBlock(grid, x, y, type) {\n    if (grid[x][y] == 0) {\n      grid[x][y] = type;\n      return true;\n    } else {\n      return false;\n    }\n  }\n  /** Function takes in grid and replaces water blocks with air blocks\n   */\n\n\n  resetGrid(grid) {\n    for (let x = 0; x < grid.length; x++) {\n      for (let y = 0; y < grid.length; y++) {\n        if (grid[x][y] == 2) {\n          grid[x][y] = 0;\n        }\n      }\n    }\n  }\n\n  intializeGrid(size) {\n    var grid = new Array(size);\n\n    for (var i = 0; i < size; i++) {\n      grid[i] = new Array(size);\n\n      for (var j = 0; j < size; j++) {\n        grid[i][j] = 0;\n      }\n    }\n\n    return grid;\n  }\n\n  printGrid(grid) {\n    process.stdout.write(\"----------------\\n\");\n\n    for (var i = 0; i < grid.length; i++) {\n      for (var j = 0; j < grid[i].length; j++) {\n        process.stdout.write(numToIcon[grid[i][j]] + \" \");\n      }\n\n      process.stdout.write(\"|\\n\");\n    }\n\n    process.stdout.write(\"----------------\\n\");\n  }\n\n  updateGrid(grid) {\n    for (var i = 0; i < grid.length - 1; i++) {\n      for (var j = 0; j < grid[i].length; j++) {\n        if (grid[i][j] == 2) {\n          if (grid[i + 1][j] == 0) {\n            grid[i + 1][j] = 4;\n          } else if (grid[i + 1][j] == 1) {\n            if (grid[i][j - 1] == 0) grid[i][j - 1] = 4;\n            if (grid[i][j + 1] == 0) grid[i][j + 1] = 4;\n          }\n\n          grid[i][j] = 3;\n        }\n      }\n    }\n\n    for (var i = 0; i < grid.length; i++) {\n      for (var j = 0; j < grid[i].length; j++) {\n        if (grid[i][j] == 4) grid[i][j] = 2;\n      }\n    }\n  }\n\n  placeWater(grid, x, y) {\n    grid[x][y] = 2;\n  } // test code end\n\n\n  done(grid) {\n    for (let i = 0; i < grid[0].length; i++) {\n      if (grid[grid.length][i] === 2 || grid[grid.length][i] === 3) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  placeStone(grid, x, y) {\n    grid[x][y] = 1;\n  }\n\n}\n\nexport default GameGrid;","map":{"version":3,"sources":["/home/johndoe/Documents/GT/HackGT/DisHackGT8/Discere-Hack-GT-8/HackGT8/src/GameLogic.js"],"names":["GameGrid","constructor","props","grid","intializeGrid","size","numToIcon","placeBlock","x","y","type","resetGrid","length","Array","i","j","printGrid","process","stdout","write","updateGrid","placeWater","done","placeStone"],"mappings":"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","sourcesContent":["/**Types of blocks:\n * 0 Air\n * 1 Stone\n * 2 Water\n * 3 Fixed water\n */\n\n/** Function takes in grid, coordinates and type of block to be placed\n * returns boolean representing success / failure\n */\nclass GameGrid {\n\n    constructor(props) {\n        this.grid = this.intializeGrid(props.size);\n        this.numToIcon = {0:\" \", 1:\"#\", 2:\"o\", 3:\"o\"};\n    }\n\n    placeBlock(grid, x, y, type) {\n        if (grid[x][y] == 0) {\n            grid[x][y] = type;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /** Function takes in grid and replaces water blocks with air blocks\n     */\n    resetGrid(grid) {\n        for (let x = 0; x < grid.length; x++) {\n            for (let y = 0; y < grid.length; y++) {\n                if (grid[x][y] == 2) {\n                    grid[x][y] = 0;\n                }\n            }\n        }\n    }\n\n    intializeGrid(size) {\n        var grid = new Array(size);\n        for (var i = 0; i < size; i++) {\n            grid[i] = new Array(size);\n            for(var j=0; j<size; j++) {\n                grid[i][j] = 0;\n            }\n        }\n        return grid;\n    }\n\n    printGrid(grid) {\n        process.stdout.write(\"----------------\\n\");\n        for(var i=0; i<grid.length; i++) {\n            for(var j=0; j<grid[i].length; j++) {\n                process.stdout.write(numToIcon[grid[i][j]] + \" \");\n            }\n            process.stdout.write(\"|\\n\");\n        }\n        process.stdout.write(\"----------------\\n\");\n    }\n\n    updateGrid(grid) {\n        for(var i=0; i<grid.length-1; i++) {\n            for(var j=0; j<grid[i].length; j++) {\n                if (grid[i][j] == 2) {\n                    if (grid[i+1][j] == 0) {\n                        grid[i+1][j] = 4;\n                    } else if (grid[i+1][j] == 1) {\n                        if (grid[i][j-1] == 0) grid[i][j-1] = 4;\n                        if (grid[i][j+1] == 0) grid[i][j+1] = 4;\n                    }\n                    grid[i][j] = 3;\n                }\n            }\n        }\n        for(var i=0; i<grid.length; i++) {\n            for(var j=0; j<grid[i].length; j++) {\n                if (grid[i][j] == 4) grid[i][j] = 2;\n            }\n        }\n        \n    }\n\n    placeWater(grid, x, y) {\n        grid[x][y] = 2;\n    }\n    // test code end\n\n    done(grid) {\n        for (let i = 0; i < grid[0].length; i++) {\n            if (grid[grid.length][i] === 2 || grid[grid.length][i] === 3) {\n                return true\n            }\n        }\n        return false\n    }\n\n    placeStone(grid, x, y) {\n        grid[x][y] = 1;\n    }\n}\n\nexport default GameGrid"]},"metadata":{},"sourceType":"module"}