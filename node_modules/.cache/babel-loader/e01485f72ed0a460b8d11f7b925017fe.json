{"ast":null,"code":"var _jsxFileName = \"/Users/maxliu/Desktop/HackGT8/src/index.js\";\nimport { div } from 'prelude-ls';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GameGrid from './GameLogic.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst blockDict = {\n  1: {\n    'material': 'stone'\n  },\n  0: {\n    'material': 'empty'\n  },\n  2: {\n    'material': 'water'\n  },\n  3: {\n    'material': 'water'\n  },\n  4: {\n    'material': 'left-corner-water'\n  },\n  5: {\n    'material': 'right-corner-water'\n  }\n};\n\nclass Square extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      material: blockDict[props.grid.getIndex(props.x, props.y)].material\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"square\",\n      onClick: () => {\n        this.props.grid.placeStone(this.props.x, this.props.y);\n        this.setState({\n          material: this.state.material !== 'stone' ? 'stone' : 'empty'\n        });\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"material \" + blockDict[this.props.grid.getIndex(this.props.x, this.props.y)].material\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass Board extends React.Component {\n  renderSquare(material, x, y) {\n    return /*#__PURE__*/_jsxDEV(Square, {\n      material: material,\n      x: x,\n      y: y,\n      grid: this.props.grid\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 14\n    }, this);\n  }\n\n  renderInitGrid(width, height) {\n    const grid = [];\n\n    for (let row = 0; row < width; row++) {\n      const currentRow = [];\n\n      for (let col = 0; col < height; col++) {\n        currentRow.push(blockDict[0]);\n      }\n\n      grid.push(currentRow);\n    }\n\n    let columnIndex = -1;\n    let rowIndex = -1;\n    return grid.map(row => {\n      columnIndex++;\n      rowIndex = -1;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: row.map(block => {\n          rowIndex++;\n          return this.renderSquare(block.material, rowIndex, columnIndex);\n        })\n      }, columnIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this);\n    });\n  }\n\n  render() {\n    const status = 'Poggers';\n    const renderedGrid = this.renderInitGrid(this.props.grid.getSize(), this.props.grid.getSize());\n    console.log(\"Rendered\");\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status\",\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this), renderedGrid]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.waterInterval = null;\n    this.state = {\n      grid: new GameGrid(props.size)\n    };\n  }\n\n  startWater() {\n    console.log(this.state);\n    this.state.grid.initBucketGrid(this.props.size, this.props.waterStart, this.props.waterEnd);\n    this.state.grid.placeWater(this.props.waterStart[0], 0);\n    this.waterInterval = setInterval(() => {\n      this.updateWater(this);\n    }, 700);\n  }\n\n  updateWater(game) {\n    game.state.grid.updateGrid();\n    game.setState({\n      grid: game.state.grid\n    });\n\n    if (game.state.grid.done()) {\n      clearInterval(game.waterInterval);\n      console.log(game.state.grid.checkForWin());\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-board\",\n        children: /*#__PURE__*/_jsxDEV(Board, {\n          grid: this.state.grid\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          this.startWater();\n        },\n        children: \"Start water\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }, this);\n  }\n\n} // ========================================\n\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(Game, {\n  size: 8,\n  waterStart: [0],\n  waterEnd: [5]\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 140,\n  columnNumber: 5\n}, this), document.getElementById('root'));","map":{"version":3,"sources":["/Users/maxliu/Desktop/HackGT8/src/index.js"],"names":["div","React","ReactDOM","GameGrid","blockDict","Square","Component","constructor","props","state","material","grid","getIndex","x","y","render","placeStone","setState","Board","renderSquare","renderInitGrid","width","height","row","currentRow","col","push","columnIndex","rowIndex","map","block","status","renderedGrid","getSize","console","log","Game","waterInterval","size","startWater","initBucketGrid","waterStart","waterEnd","placeWater","setInterval","updateWater","game","updateGrid","done","clearInterval","checkForWin","document","getElementById"],"mappings":"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","sourcesContent":["import { div } from 'prelude-ls';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GameGrid from './GameLogic.js';\n\nconst blockDict = {\n  1: {\n    'material' : 'stone',\n  },\n  0: {\n    'material' : 'empty',\n  },\n  2: {\n    'material' : 'water',\n  },\n  3: {\n    'material' : 'water',\n  },\n  4: {\n    'material' : 'left-corner-water'\n  },\n  5: {\n    'material' : 'right-corner-water'\n  }\n\n};\n\nclass Square extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      material: blockDict[props.grid.getIndex(props.x, props.y)].material,\n    };\n  }\n\n  render() {\n    return (\n      <button className={\"square\"} onClick={() => {\n        this.props.grid.placeStone(this.props.x, this.props.y); \n        this.setState({material: this.state.material !== 'stone' ? 'stone' : 'empty'})}\n        }>\n        <div className={\"material \" + blockDict[this.props.grid.getIndex(this.props.x, this.props.y)].material}></div>\n      </button>\n    );\n  }\n}\n  \nclass Board extends React.Component {\n    renderSquare(material, x, y) {\n      return <Square material = {material} x={x} y={y} grid={this.props.grid}/>;\n    }\n\n    renderInitGrid(width, height) {\n      const grid = [];\n      for (let row = 0; row < width; row++) {\n        const currentRow = [];\n        for (let col = 0; col < height; col++) {\n          currentRow.push(blockDict[0]);\n        }\n          grid.push(currentRow);\n      }\n      let columnIndex = -1;\n      let rowIndex = -1;\n      return grid.map((row) => {\n        columnIndex++;\n        rowIndex = -1;\n        return (\n          <div className=\"board-row\" key={columnIndex}>\n              {row.map((block) => {\n                rowIndex++;\n                return (\n                  this.renderSquare(block.material, rowIndex, columnIndex)\n                );\n              })}\n          </div>\n        )\n      });\n\n    }\n\n    render() {\n      const status = 'Poggers';\n      const renderedGrid = this.renderInitGrid(this.props.grid.getSize(), this.props.grid.getSize());\n      console.log(\"Rendered\");\n\n      return (\n        <div>\n          <div className=\"status\">{status}</div>\n\n          {renderedGrid}\n        </div>\n      );\n    }\n  }\n  \n  class Game extends React.Component {\n\n    constructor(props) {\n      super(props);\n      this.waterInterval = null;\n      this.state = {\n        grid: new GameGrid(props.size),\n      }\n      \n    }\n\n    startWater() {\n      console.log(this.state);\n      this.state.grid.initBucketGrid(this.props.size, this.props.waterStart, this.props.waterEnd);\n      this.state.grid.placeWater(this.props.waterStart[0], 0);\n      this.waterInterval = setInterval(() => {this.updateWater(this)}, 700);\n    }\n\n    updateWater(game) {\n      game.state.grid.updateGrid();\n      game.setState({grid: game.state.grid});\n      if (game.state.grid.done()) {\n        clearInterval(game.waterInterval);\n        console.log(game.state.grid.checkForWin());\n      }\n    }\n\n    render() {\n      return (\n        <div className=\"game\">\n          <div className=\"game-board\">\n            <Board grid={this.state.grid}/>\n          </div>\n          <button onClick={() => {this.startWater()}}>Start water</button>\n        </div>\n      );\n    }\n  }\n  \n  // ========================================\n  \n  ReactDOM.render(\n    <Game size={8} waterStart={[0]} waterEnd={[5]}/>,\n    document.getElementById('root')\n  );\n  "]},"metadata":{},"sourceType":"module"}