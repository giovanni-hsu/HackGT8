{"ast":null,"code":"/**Types of blocks:\n * 0 Air\n * 1 Stone\n * 2 Water\n * 3 Fixed water\n */\n\n/** Function takes in grid, coordinates and type of block to be placed\n * returns boolean representing success / failure\n */\nclass GameGrid {\n  constructor(size) {\n    this.size = size;\n    this.grid = this.intializeGrid(size);\n    this.numToIcon = {\n      0: \" \",\n      1: \"#\",\n      2: \"o\",\n      3: \"o\"\n    };\n  }\n\n  placeBlock(x, y, type) {\n    if (this.grid[x][y] === 0) {\n      this.grid[x][y] = type;\n      return true;\n    } else {\n      return false;\n    }\n  }\n  /** Function takes in grid and replaces water blocks with air blocks\n   */\n\n\n  resetGrid() {\n    for (let x = 0; x < this.grid.length; x++) {\n      for (let y = 0; y < this.grid.length; y++) {\n        if (this.grid[x][y] === 2) {\n          this.grid[x][y] = 0;\n        }\n      }\n    }\n  }\n\n  intializeGrid() {\n    var grid = new Array(this.size);\n\n    for (var i = 0; i < this.size; i++) {\n      grid[i] = new Array(this.size);\n\n      for (var j = 0; j < this.size; j++) {\n        grid[i][j] = 0;\n      }\n    }\n\n    return grid;\n  }\n  /** Function initializes bucket grid, taking in as input size of grid and source and exit points (just x coordinate)\n   * for water. Places source of water and bucket on selected points, and obsidian everywhere else\n   */\n\n\n  initBucketGrid(size, source, exit) {\n    const HEIGHT = 2;\n    var grid = new Array(HEIGHT);\n\n    for (var i = 0; i < HEIGHT; i++) {\n      grid[i] = new Array(size);\n\n      for (var j = 0; j < size; j++) {\n        grid[i][j] = 5;\n      }\n    }\n\n    grid[0][source] = 3;\n    grid[1][exit] = 4;\n    return grid;\n  }\n  /** Function returns boolean if block above bucket has water, representing win\n  */\n\n\n  checkForWin(grid, bucketGrid) {\n    let bucketLoc;\n\n    for (let i = 0; i < bucketGrid[1].length; i++) {\n      if (i === 4) {\n        bucketLoc = i;\n      }\n    }\n\n    let previousBlock = grid[grid.length - 1][bucketLoc];\n\n    if (previousBlock === 2 || previousBlock === 3) {\n      return true;\n    }\n\n    return false;\n  }\n\n  printGrid() {\n    process.stdout.write(\"----------------\\n\");\n\n    for (var i = 0; i < this.grid.length; i++) {\n      for (var j = 0; j < this.grid[i].length; j++) {\n        process.stdout.write(this.numToIcon[this.grid[i][j]] + \" \");\n      }\n\n      process.stdout.write(\"|\\n\");\n    }\n\n    process.stdout.write(\"----------------\\n\");\n  }\n\n  updateGrid() {\n    for (var i = 0; i < this.grid.length - 1; i++) {\n      for (var j = 0; j < this.grid[i].length; j++) {\n        if (this.grid[i][j] === 2) {\n          if (this.grid[i + 1][j] === 0) {\n            this.grid[i + 1][j] = 4;\n          } else if (this.grid[i + 1][j] === 1) {\n            if (this.grid[i][j - 1] === 0) this.grid[i][j - 1] = 4;\n            if (this.grid[i][j + 1] === 0) this.grid[i][j + 1] = 4;\n          }\n\n          this.grid[i][j] = 3;\n        }\n      }\n    }\n\n    for (i = 0; i < this.grid.length; i++) {\n      for (j = 0; j < this.grid[i].length; j++) {\n        if (this.grid[i][j] === 4) this.grid[i][j] = 2;\n      }\n    }\n  } //shouldnt this be grid[y][x]?\n\n\n  placeWater(x, y) {\n    this.grid[y][x] = 2;\n  } // test code end\n\n\n  done() {\n    //check sides, check split paths, never touch bottom\n    for (let i = 0; i < this.grid.length - 1; i++) {\n      for (let j = 0; j < this.grid.length[0]; j++) {\n        console.log(i, j);\n\n        if (this.grid[i][j] === 2) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  placeStone(x, y) {\n    this.grid[y][x] = 1;\n  }\n\n  getIndex(x, y) {\n    return this.grid[y][x];\n  }\n\n}\n\nexport default GameGrid;","map":{"version":3,"sources":["/Users/maxliu/Desktop/HackGT8/src/GameLogic.js"],"names":["GameGrid","constructor","size","grid","intializeGrid","numToIcon","placeBlock","x","y","type","resetGrid","length","Array","i","j","initBucketGrid","source","exit","HEIGHT","checkForWin","bucketGrid","bucketLoc","previousBlock","printGrid","process","stdout","write","updateGrid","placeWater","done","console","log","placeStone","getIndex"],"mappings":"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","sourcesContent":["/**Types of blocks:\n * 0 Air\n * 1 Stone\n * 2 Water\n * 3 Fixed water\n */\n\n/** Function takes in grid, coordinates and type of block to be placed\n * returns boolean representing success / failure\n */\n class GameGrid {\n\n    constructor(size) {\n        this.size = size;\n        this.grid = this.intializeGrid(size);\n        this.numToIcon = {0:\" \", 1:\"#\", 2:\"o\", 3:\"o\"};\n    }\n\n    placeBlock(x, y, type) {\n        if (this.grid[x][y] === 0) {\n            this.grid[x][y] = type;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /** Function takes in grid and replaces water blocks with air blocks\n     */\n    resetGrid() {\n        for (let x = 0; x <  this.grid.length; x++) {\n            for (let y = 0; y <  this.grid.length; y++) {\n                if ( this.grid[x][y] === 2) {\n                     this.grid[x][y] = 0;\n                }\n            }\n        }\n    }\n\n    intializeGrid() {\n        var grid = new Array(this.size);\n        for (var i = 0; i < this.size; i++) {\n            grid[i] = new Array(this.size);\n            for(var j=0; j<this.size; j++) {\n                grid[i][j] = 0;\n            }\n        }\n        return grid;\n    }\n\n    /** Function initializes bucket grid, taking in as input size of grid and source and exit points (just x coordinate)\n     * for water. Places source of water and bucket on selected points, and obsidian everywhere else\n     */\n    initBucketGrid(size, source, exit) {\n        const HEIGHT = 2;\n        var grid = new Array(HEIGHT);\n        for (var i = 0; i < HEIGHT; i++) {\n            grid[i] = new Array(size);\n            for(var j=0; j<size; j++) {\n                grid[i][j] = 5;\n            }\n        }\n        grid[0][source] = 3;\n        grid[1][exit] = 4;\n        return grid;\n    }\n    /** Function returns boolean if block above bucket has water, representing win\n    */\n    checkForWin(grid, bucketGrid) {\n        let bucketLoc\n        for (let i = 0; i < bucketGrid[1].length; i++) {\n            if (i === 4) {\n                bucketLoc = i;\n            }\n        }\n        let previousBlock = grid[grid.length-1][bucketLoc];\n        if (previousBlock === 2 || previousBlock === 3) {\n            return true;\n        }\n        return false;\n    }\n\n\n    printGrid() {\n        process.stdout.write(\"----------------\\n\");\n        for(var i=0; i< this.grid.length; i++) {\n            for(var j=0; j< this.grid[i].length; j++) {\n                process.stdout.write(this.numToIcon[this.grid[i][j]] + \" \");\n            }\n            process.stdout.write(\"|\\n\");\n        }\n        process.stdout.write(\"----------------\\n\");\n    }\n\n    updateGrid() {\n        for(var i=0; i< this.grid.length-1; i++) {\n            for(var j=0; j< this.grid[i].length; j++) {\n                if ( this.grid[i][j] === 2) {\n                    if ( this.grid[i+1][j] === 0) {\n                         this.grid[i+1][j] = 4;\n                    } else if ( this.grid[i+1][j] === 1) {\n                        if ( this.grid[i][j-1] === 0)  this.grid[i][j-1] = 4;\n                        if ( this.grid[i][j+1] === 0)  this.grid[i][j+1] = 4;\n                    }\n                    this.grid[i][j] = 3;\n                }\n            }\n        }\n        for(i=0; i< this.grid.length; i++) {\n            for(j=0; j< this.grid[i].length; j++) {\n                if ( this.grid[i][j] === 4)  this.grid[i][j] = 2;\n            }\n        }\n        \n    }\n//shouldnt this be grid[y][x]?\n    placeWater(x, y) {\n         this.grid[y][x] = 2;\n    }\n    // test code end\n\n    done() { //check sides, check split paths, never touch bottom\n        for ( let i = 0; i < this.grid.length - 1; i++) {\n            for( let j = 0; j < this.grid.length[0]; j++) {\n                console.log(i, j)\n                if( this.grid[i][j] === 2) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    placeStone(x, y) {\n        this.grid[y][x] = 1;\n    }\n    getIndex(x, y) {\n        return (\n          this.grid[y][x]\n        )\n      }\n}\n\nexport default GameGrid"]},"metadata":{},"sourceType":"module"}